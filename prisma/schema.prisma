// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  clubs         UserInClub[]
  accounts      Account[]
  sessions      Session[]
}

model Club {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  coverImageUrl String
  name          String
  description   String
  members       UserInClub[]
  events        Event[]
}

model UserInClub {
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  club       Club      @relation(fields: [clubId], references: [id])
  clubId     Int
  invitedAt  DateTime  @default(now())
  role       Role      @default(MEMBER)
  isApproved Boolean   @default(false)
  joinedAt   DateTime? @updatedAt

  @@id([userId, clubId])
}

model Event {
  id          Int      @id @default(autoincrement())
  club        Club     @relation(fields: [clubId], references: [id])
  clubId      Int
  name        String
  meetingUrl  String
  scheduledAt DateTime
  duration    Int
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken") @db.Text
  access_token       String? @map("accessToken") @db.Text
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken") @db.Text
  session_state      String? @map("sessionState")
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
